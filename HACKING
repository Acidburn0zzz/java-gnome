Contributing to java-gnome

We'd love to have you contribute by hacking on the bindings themselves!

GETTING STARTED
===============

1. Checkout the source code
---------------------------

We are using Bazaar-NG to manage our source code. More commonly known as
`bzr`, it is an advanced third-generation Distributed Version [or Revision]
Control System.

To fetch the code, simply do:

        $ bzr branch http://research.operationaldynamics.com/bzr/java-gnome/mainline java-gnome
        $ cd java-gnome
        $ ./configure
        $ make

See the instructions in README for how to install from a source tarball and
what options you can supply to Equivalence's `./configure` script.

2. Do your own thing!
---------------------

The amazing thing about the decentralized VCS tools is that you do not need to
be online to make commits. But it's more than that -- you don't need to be me
to make commits! You can work away on your own branch(es) and then send your
patches _in already committed form_ to me for consideration and merging.

This is a vitally important point: no one can tell you you can't work on
something. And of you want to share it, go right ahead.

That said, if you'd like to see your work merged into the mainline and
available publicly in the official releases, then we'd encourage you to follow
the stylistic guidelines laid out below.

Why `bzr`?
----------

We are using `bzr` at the moment for its relative straight forwardness.
Anyone used to using the old world tools like CVS or Subversion will be able
to make sense of it and you can learn from there. While Bazaar could be a lot
perkier in terms of its responsiveness, it is improving rapidly. The fact that
it has a vibrant community, is widely portable, and most of all that the
development team actually have an enormous unit test suite to keep them honest
biases in their favour.


TECHNICAL DETAILS
=================

The java-gnome 4.x bindings are pretty straight forward, so in terms of adding
new coverage you can probably pick things up by example fairly easily. But you
really should take the time to understand *why* things work, or you won't be
able to understand the mechanisms involved behind the scene.

API design and overall system architecture 
------------------------------------------

In the `doc/design/` subdirectory you will find condensed versions of the
various mailing list discussions that lead to the current design. You are
encouraged to peruse these files; the document on Architecture is pretty much
required reading if you want to understand what's going on.

STYLE GUIDE
===========

Things like how you format your code, what editor you use, etc are all very
personal issues, but for a project to function with anything even remotely
resembling sanity, there need to be some standards and conventions. Thus we
have several documents outlining the style guidelines you'll need to know if
hacking on the java-gnome 4.x bindings.

Code formatting
---------------

I've carefully documented the 4 divergences from the otherwise default "Java
conventions" for Java source code formatting. Please take a moment to read
`doc/style/CodeFormat`; your patches have a much better chance of being
accepted if they produce clean diffs, and that's more likely to happen if you
stick to these rules.

Commit Messages
---------------

There are just a few minor conventions you should be aware of before
committing patches. See `doc/style/CommitMessages`.

Documentation
-------------

JavaDoc is the heart and soul of our API documentation and good JavaDoc is
going to be *the* key defining criteria for our bindings being **approachable**
to new developers. As such we've written out considerable guidance about how
to best go about documenting our public APIs. 

Of course, JavaDoc alone isn't sufficient, and we have a number of supporting
documents describing the design and architecture of java-gnome.  See
`doc/style/Documentation` for discussion of both JavaDoc and textual
documentation.

Markup
------

We have gone to considerable trouble to ensure our text documentation files are
readable from a terminal window, but by using a simple yet powerful markup
syntax called Markdown we can also easily render these files to useful web
pages. See `doc/design/MARKUP`.


CONCLUSION
==========

The opportunity to work on something you love is the greatest experience you
can have. If you or your company chooses to offer code you write, be it
towards helping us on this project or on any other endeavour whatsoever, I
encourage you to choose to let others use your work as Software Libre and in
your own turn help people find their own passion and excitement. By your
actions you lift us all up. I hope you'll join us!

Apotheosis Rising.

AfC

`--`  
Andrew Frederick Cowie  
Managing Director,  
[Operational Dynamics](http://www.operationaldynamics.com/),  
a Change Management consultancy...

Maintainer,  
[java-gnome](http://java-gnome.sourceforge.net/),  
opening GTK and GNOME to Java programmers!

_Last modified 9 Dec 06_
<!-- vim: set textwidth=78 nowrap: -->
